/*
 * bintree.template
 *
 *  Created on: Jun 22, 2017
 *      Author: pthim
 */

#include <cstdlib>
#include <iostream>

namespace main_savitch_10
{
	// NON-MEMBER FUNCTIONS for the binary_tree_node<Item>:
	template <class Process, class BTNode>
	void inorder(Process f, BTNode* node_ptr) {
		if (node_ptr != NULL) {
			inorder(f, node_ptr->left());
			f(node_ptr->data());
			inorder(f, node_ptr->right());
		}
	}

	template <class Process, class BTNode>
	void preorder(Process f, BTNode* node_ptr) {
		if (node_ptr != NULL) {
			f(node_ptr->data());
			inorder(f, node_ptr->left());
			inorder(f, node_ptr->right());
		}
	}

	template <class Process, class BTNode>
	void postorder(Process f, BTNode* node_ptr) {
		if (node_ptr != NULL) {
			inorder(f, node_ptr->left());
			inorder(f, node_ptr->right());
			f(node_ptr->data());
		}
	}

	template <class Item, class SizeType>
	void print(binary_tree_node<Item>* node_ptr, SizeType depth) {
		if (node_ptr != NULL) {
			while (depth > 0)
				std::cout << " ";
			std::cout << node_ptr->data() << std::endl;
			print(node_ptr->left_field(), depth+1);
			print(node_ptr->right_field(), depth+1);
		}
	}

	template <class Item>
	void tree_clear(binary_tree_node<Item>*& root_ptr) {
		if (root_ptr != NULL) {
			binary_tree_node<Item>* child;
			child = root_ptr->left();
			tree_clear(child);
			child = root_ptr->right();
			tree_clear(child);
			delete root_ptr;
			root_ptr = NULL;
		}
	}

	template <class Item>
	binary_tree_node<Item>* tree_copy(const binary_tree_node<Item>* root_ptr) {
		if (root_ptr == NULL)
			return NULL;
		else {
			binary_tree_node<Item>* l_child;
			binary_tree_node<Item>* r_child;

			l_child = tree_copy(root_ptr->left());
			r_child = tree_copy(root_ptr->right());

			return new binary_tree_node<Item> (root_ptr->data(), l_child, r_child);
		}
	}

	template <class Item>
	std::size_t tree_size(const binary_tree_node<Item>* node_ptr) {
		if (node_ptr == NULL)
			return 0;
		else {
			return 1 + tree_size(node_ptr->left()) + tree_size(node_ptr->right());
		}
	}
}
